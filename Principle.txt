數值計算
==================

加法包含純數值計算與資料檢查兩部份，純數值計算的部份以加法器
為基礎原理，透過查表法處理位數相加與進位，檢查部份則判別輸入
資料是否為整數，如果數值處理正確，則回傳值必為整數，因此不檢
查回傳值的型別，確定兩者皆為整數，則分析正負號，根據正負號決
定計算方式，請參考以下演算法。

> type Sign = + | -
> 
> Check_Sign :: Sign -> Sign -> (Int -> Int -> Int)
> Check_Sign sign_1 sign_2 | sign_1 == sign_2 = Calculate
>                          | otherwise        = (\int_1 int_2 -> Calculate int_1 (Complement int_2))

決定計算方式後，根據兩數的絕對值大小，決定何者為先計算的數值
，較大的數值將決定計算後數值的正負數，由於使用加法來處理兩數
相減的情況，如果先將數值轉為二進位計算後再轉回十進位將浪廢許
多時間，因此需要使用補數法來轉換數值，並透過補數法與加法取代
減法，這裡採用「n 進位補數法」，證明如下。

> 於 n進位時，設有一個數值 a，若存在一個數值 b使以下條件成立
> a + b = 0
> 則我們稱 a與 b互補，若稱 a為正數，則 b即稱負數，反之亦同。
> 
> 假設存在兩個數值 a、 b，若 a為 r位數， b為 k位數，假設 b的
> 補數為 b' ，則可獲得以下結果。
> |b| < |a| < |b'| or |b'| < |a| < |b|
> 因為 a、 b正負號相反，相加後所得結果必小於兩者絕對值中較大
> 者，即代表從 r與 k中取較大者 max (r, k) ，若相加後得到的位
> 數 l大於 max (r, k) ，則我們只取 max (r, k) 位數，稱此為「
> 補數法最大位數取位原則」。
> 
> 設 n進位 r位數的最大值為 b' ，根據取位原則我們可以得到如下
> 結果。
> b' + 1 = 0
> 
> 此時我們得到如下等式。
> a + b = b' + 1 => b = b' - a + 1
> 若 n為二，後者即為常見的二補數法。
> 
> 設 n為 10 ，則十進位補數法最大值為
>  9x10^r + 9x10^(r-1) + .. + 9
> 
> 若 a 值以相同方式表示則為
> (a_r)x10^r + a_(r-1)x10^(r-1) + .. a_1
> 
> 則可得知對於 b' - a的所有位數皆有以下公式。
> f x = 9 - x
> 
> 根據此公式求完 b' - a的值後加一即為 a的補數 b。
