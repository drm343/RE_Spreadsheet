#!/bin/bash

#-------------------------------#
# Int Type                      #
#-------------------------------#
function Is_Digit {
  RESULT=`echo "$1" | grep "^[0123456789]\{1\}$"`

  case $RESULT in
    "")
      RESULT="false"
      ;;
    *)
      RESULT="true"
      ;;
  esac
}

function Is_Int {
  RESULT=`echo "$1" | grep "\-\?[0123456789]\{1,10\}$"`

  case $RESULT in
    "")
      RESULT="false"
      ;;
    *)
      RESULT="true"
      ;;
  esac
}

function Is_Negative {
  RESULT=`echo "$1" | grep "\-"`

  case $RESULT in
    "")
      RESULT="false"
      ;;
    *)
      RESULT="true"
      ;;
  esac
}

function Decimal_Complement {
  RESULT=`echo "$1" | tr "1234567890" "8765432109"`
  Succ "$RESULT"
}

function Succ {
  Uncheck_Add "$1" "1"
}

function Pred {
  Add "$1" "-1"
}

function Uncheck_Add {
  local carry_result="false"

  #------------------#
  # Check Carry      #
  #------------------#
  function No_Carry {
    RESULT=`echo "$1" | sed "s/00/0/" | sed "s/01/1/" | sed "s/02/2/" | sed "s/11/2/" | sed "s/03/3/" | sed "s/12/3/" | sed "s/04/4/" | sed "s/13/4/" | sed "s/22/4/" | sed "s/05/5/" | sed "s/14/5/" | sed "s/23/5/" | sed "s/06/6/" | sed "s/15/6/" | sed "s/24/6/" | sed "s/33/6/" | sed "s/07/7/" | sed "s/16/7/" | sed "s/25/7/" | sed "s/34/7/" | sed "s/08/8/" | sed "s/17/8/" | sed "s/26/8/" | sed "s/35/8/" | sed "s/44/8/" | sed "s/09/9/" | sed "s/18/9/" | sed "s/27/9/" | sed "s/36/9/" | sed "s/45/9/"`
    local local_result=$RESULT

    Is_Digit "$RESULT"

    case $RESULT in
      "false")
        RESULT="nothing"
        ;;
      *)
        RESULT=$local_result
        carry_result="false"
        ;;
    esac
  }

  function Carry {
    RESULT=`echo "$1" | sed "s/19/0/" | sed "s/28/0/" | sed "s/37/0/" | sed "s/46/0/" | sed "s/55/0/" | sed "s/29/1/" | sed "s/38/1/" | sed "s/47/1/" | sed "s/56/1/" | sed "s/39/2/" | sed "s/48/2/" | sed "s/57/2/" | sed "s/66/2/" | sed "s/49/3/" | sed "s/58/3/" | sed "s/67/3/" | sed "s/59/4/" | sed "s/68/4/" | sed "s/77/4/" | sed "s/69/5/" | sed "s/78/5/" | sed "s/79/6/" | sed "s/88/6/" | sed "s/89/7/" | sed "s/99/8/"`
    local local_result=$RESULT

    Is_Digit "$RESULT"

    case $RESULT in
      "false")
        RESULT="nothing"
        ;;
      *)
        RESULT=$local_result
        carry_result="true"
        ;;
    esac
  }

  #------------------#
  # Inline           #
  #------------------#
  function Inline_Add {
    No_Carry "$1$2"

    if [ $RESULT == "nothing" ]
    then
      Carry "$1$2"
    fi
  }

  function Check_Carry_When_Calculate_End {
    if [ "$carry_result" == "true" ]
    then
      Succ "$1"
    else
      RESULT=""
    fi
    carry_result="false"
  }

  function Inline_Add_Loop {
    local num_1_car=`echo "$1" | sed "s/.*\(.\)$/\1/"`
    local num_2_car=`echo "$2" | sed "s/.*\(.\)$/\1/"`
    local num_1_cdr=`echo "$1" | sed "s/\(.*\).$/\1/"`
    local num_2_cdr=`echo "$2" | sed "s/\(.*\).$/\1/"`
    local new_val=""

    if [ "$carry_result" == "true" ]
    then
      Succ "$num_1_car"
      num_1_car="$RESULT"
    fi

    Inline_Add "$num_1_car" "$num_2_car"

    if [ "$RESULT" == "nothing" ]
    then
      Inline_Add "$num_2_car" "$num_1_car"
    fi

    new_val="$RESULT$3"

    if [ "$num_1_cdr" == "" ] && [ "$num_2_cdr" == "" ]
    then
      Check_Carry_When_Calculate_End "0"
      RESULT=`echo "$RESULT$new_val" | sed "s/\([1234567890]\{10\}\)$/\1/"`
    elif [ "$num_1_cdr" == "" ]
    then
      Check_Carry_When_Calculate_End "$num_2_cdr"
      RESULT=`echo "$num_2_cdr$new_val" | sed "s/\([1234567890]\{10\}\)$/\1/"`
    elif [ "$num_2_cdr" == "" ]
    then
      Check_Carry_When_Calculate_End "$num_1_cdr"
      RESULT=`echo "$num_1_cdr$new_val" | sed "s/\([1234567890]\{10\}\)$/\1/"`
    else
      Inline_Add_Loop "$num_1_cdr" "$num_2_cdr" "$new_val"
    fi
  }

  #------------------#
  # main uncheck add #
  #------------------#
  Inline_Add_Loop "$1" "$2" ""
}

function Add {
  #------------------#
  # Order            #
  #------------------#
  function Num_1_Big_Than_Num_2 {
    local num_1_car=""
    local num_2_car=""
    local num_1_cdr=""
    local num_2_cdr=""

    function Loop {
      RESULT=`echo "$1" | sed "s/0./false/" | sed "s/.*0/true/"`

      case $RESULT in
        "true" | "false")
          ;;
        *)
          RESULT=`echo "$RESULT" | tr "123456789" "012345678"`
          Loop "$RESULT"
          ;;
      esac
    }

    Car $1
    num_1_car=$RESULT
    Car $2
    num_2_car=$RESULT

    if [ "$num_1_car" != "$num_2_car" ]
    then
      Loop "$num_1_car$num_2_car"
    fi

    case $RESULT in
      "true" | "false")
        ;;
      *)
        Cdr $1
        num_1_cdr=$RESULT
        Cdr $2
        num_2_cdr=$RESULT

        if [ "$num_1_cdr" != "" ]
        then
          Num_1_Big_Than_Num_2 "$num_1_cdr" "$num_2_cdr"
        fi
        ;;
    esac
  }

  #------------------#
  # List Process     #
  #------------------#
  function Car {
    RESULT=`echo "$1" | sed "s/\(.\).*/\1/"`
  }

  function Cdr {
    RESULT=`echo "$1" | sed "s/.\(.*\)/\1/"`
  }

  function Count_String {
    local new_val=""

    Cdr $1
    new_val=$RESULT
    Succ $2
    count=$RESULT

    if [ "$new_val" != "" ]
    then
      Count_String "$new_val" "$RESULT"
    fi
  }

  #------------------#
  # Check Sign       #
  #------------------#
  function Get_Sign_Then_Add {
    local sign=`echo "$1" | tr "1234567890" "          " | sed "s/ *$//"`
    local row_re="s/.*\(.\{$3\}\)$/\1/"

    Is_Negative $1
    num_1_is_negative=$RESULT

    Is_Negative $2
    num_2_is_negative=$RESULT

    RESULT=`echo "$1" | sed "s/\-\(.\{1,10\}\)$/\1/"`
    num_1=$RESULT
    RESULT=`echo "$2" | sed "s/\-\(.\{1,10\}\)$/\1/"`
    num_2=$RESULT

    if [ "$num_1_is_negative" != "$num_2_is_negative" ]
    then
      RESULT=`echo "000000000$num_2" | sed "$row_re"`
      Decimal_Complement $RESULT
      num_2=$RESULT
    fi

    Uncheck_Add $num_1 $num_2
    RESULT=`echo $RESULT | sed "$row_re" | sed "s/^0*0?$\(.*\)/\1/"`
    RESULT="$sign$RESULT"
  }

  #------------------#
  # Main Add         #
  #------------------#
  local num_1=""
  local num_2=""
  local num_1_is_digit=""
  local num_2_is_digit=""
  local count_1=""
  local count_2=""

  Is_Int "$1"
  num_1_type=$RESULT
  Is_Int "$2"
  num_2_type=$RESULT

  num_1=`echo "$1" | sed "s/\-\(.\{1,10\}\)$/\1/"`
  Count_String "$num_1" 0
  count_1=$RESULT
  num_1=`echo "000000000$num_1" | sed "s/.*\(.\{10\}\)$/\1/"`

  num_2=`echo "$2" | sed "s/\-\(.\{1,10\}\)$/\1/"`
  Count_String "$num_2" 0
  count_2=$RESULT
  num_2=`echo "000000000$num_2" | sed "s/.*\(.\{10\}\)$/\1/"`

  if [ $num_1_type == $num_2_type ] && [ $num_1_type == "true" ]
  then

    if [ "$num_1" == "$num_2" ]
    then
      RESULT="true"
    else
      Num_1_Big_Than_Num_2 "$num_1" "$num_2"
    fi

    case $RESULT in
      "true")
        Get_Sign_Then_Add "$1" "$2" "$count_1"
        ;;
      "false")
        Get_Sign_Then_Add "$2" "$1" "$count_2"
        ;;
      *)
        RESULT="nothing"
        ;;
    esac
  fi
}

function Mul {
  local constant_number="$1"
  local new_val="$1"

  function Mul_Loop {
    case $2 in
      "1")
        RESULT="$1"
        ;;
      *)
        Add "$1" "$constant_number"
        new_val="$RESULT"
        Pred "$2"
        Mul_Loop "$new_val" "$RESULT"
        ;;
    esac
  }

  Mul_Loop "$1" "$2"
}

#-------------------------------#
# file set                      #
#-------------------------------#
function File {
  function New {
    FILENAME="$1"
    echo "" > $FILENAME
  }

  case $1 in
    "New")
      $1 $2
      ;;
    *)
      echo "no file $1 or command error"
      exit
      ;;
  esac
}

function Size {
  local local_file="tmp_$FILENAME"
  local defalut_grid="          0"
  local column_grid="          0"

  function Set_Column {
    function Set_Column_Loop {
      case "$1" in
        "1")
          return 0
          ;;
        *)
          column_grid="$column_grid$defalut_grid"
          Pred "$1"
          Set_Column_Loop "$RESULT"
          ;;
      esac
    }
    Set_Column_Loop $1
  }

  function Set_Row {
    function Set_Row_Loop {
      case "$1" in
        "0")
          ;;
        *)
          echo "$column_grid" >> $local_file
          Pred "$1"
          Set_Row_Loop "$RESULT"
          ;;
      esac
    }
    Set_Row_Loop "$1"
  }

  SIZE_ROW="$1"
  SIZE_COLUMN="$2"

  Set_Column "$2"
  Set_Row "$1"
  mv $local_file $FILENAME
}

#-------------------------------#
# move grid register            #
#-------------------------------#
function Move {
  function Row {
    ROW=$1
  }

  function Column {
    COLUMN=$1
  }

  case $1 in
    "Row" | "Column")
      $1 $2
      ;;
    *)
      echo "move $1 error"
      ;;
  esac
}

#-------------------------------#
# set grid value                #
#-------------------------------#
function Grid {
  function Set {
    local set_value="           $1"
    set_value=`echo "$set_value" | sed "s/^.*\(.\{11\}\)$/\1/"`

    Pred "$COLUMN" "1"

    case $RESULT in
      "0")
        RESULT=0
        ;;
      *)
        Mul "11" "$RESULT"
        ;;
    esac

    search="\(.\{$RESULT\}\).\{11\}\(.*\)"
    row_re=$ROW"s/$search/\1$set_value\2/"
    sed -i "$row_re" "$FILENAME"
  }

  case $1 in
    "Set")
      $1 $2
      ;;
    *)
      echo "Grid set error"
      ;;
  esac
}

#-------------------------------#
# main                          #
#-------------------------------#
function Get_Command {
  local command=`echo "$1" | sed "s/\(.*\) .* .*/\1/"`
  local parameter=`echo "$1" | sed "s/.* \(.*\) .*/\1/"`
  local target=`echo "$1" | sed "s/.* .* \(.*\)/\1/"`
  $command $parameter $target
}

function Main_Loop {
  local file_number=$2"q;d"
  local new_line=`sed "$file_number" $1`
  Get_Command "$new_line"
  echo "$new_line"

  if [ ! "$2" == "$3" ]
  then
    Add $2 "1"
    Main_Loop "$1" "$RESULT" "$3"
  fi
}

# FILENAME
# SIZE_ROW
# SIZE_COLUMN
# ROW
# COLUMN

case $1 in
  "")
    echo "no data"
    ;;
  *)
    LAST_LINE=`grep -n ".*" $1 | tail -n 1 | sed "s/\([1234567890]*\):.*/\1/"`
    SIZE_ROW=1
    SIZE_COLUMN=1
    ROW=1
    COLUMN=1
    Main_Loop $1 1 $LAST_LINE
    ;;
esac
